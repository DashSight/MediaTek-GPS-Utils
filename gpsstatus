#!/usr/bin/python

import sys
import os
import time
import tty
import termios
import argparse
import curses
import serial
import re
import locale
import math
from collections import defaultdict

locale.setlocale(locale.LC_ALL, '')
code = locale.getpreferredencoding()
degree = unichr(0xb0).encode(code)

hasfix = False
lostfix = time.time()
gotfix = time.time()

SECONDS_PER_HOUR = 3600
GPS_OFFSET_SECONDS = 315964786
SECONDS_PER_WEEK = 604800
HOURS_PER_WEEK = 168

baudrate = {
    termios.B4800: 4800,
    termios.B9600: 9600,
    termios.B19200: 19200,
    termios.B38400: 38400,
    termios.B57600: 57600,
    termios.B115200: 115200,
}

def Convert2UTC(GPSHour):
    GPSHour *= SECONDS_PER_HOUR
    GPSHour += GPS_OFFSET_SECONDS
    return time.strftime("%Y-%m-%d %H:%M:%SZ", time.gmtime(GPSHour))

def Convert2Local(GPSHour):
    GPSHour *= SECONDS_PER_HOUR
    GPSHour += GPS_OFFSET_SECONDS
    return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(GPSHour))

def crc8(d):
    crc = 0
    for b in bytearray(d):
        crc ^= (b & 0xff)
    return crc

def convert_arg_line_to_args(arg_line):
    for arg in arg_line.split():
        if not arg.strip():
            continue
        yield arg

def send_string(fg, string):
    fg.flushInput()
    fg.write("$%s*%02x\r\n" % (string, crc8(string)))
    fg.flushOutput()

w = {}
s = {}
f = {}

ll = re.compile(r"(\d?\d\d)(\d\d)(\.\d\d\d\d)")

fix = defaultdict(lambda: "Invalid", {"0": "Invalid", "1": "GPS", "2": "DGPS", "6":"DRM"})
speed_units = defaultdict(lambda: "??",{"N": "Kn", "K": "KPH"})
modes_t = defaultdict(lambda: "N/A", {"1": "N/A", "2": "2D", "3": "3D"})
modes = defaultdict(lambda: "N/A")


def format_dms(dddmm, direction):
    s = ll.split(dddmm)
    if len(s) < 3:
        return " " * 17
    return "%3s%s %2s' %05.2f\" %s" % \
        (s[1], unichr(0xb0).encode(code), s[2], float(s[3]) * 60.0, direction)

def format_heading(heading, ref):
    try:
        return "%3d%s%s" % (math.floor(float(heading)), unichr(0xb0).encode(code), ref)
    except:
        return "     "
    
def draw_string(w, row, col, st, refresh=False):
    w.derwin(1, len(st), row, col).erase()
    w.addstr(row, col, st)
    if refresh: w.refresh()
    
def draw_time():
    w = s['TIME']
    draw_string(w, 0, 0, "Date: ")
    draw_string(w, 0, 18, "Time: ")

def draw_nav():
    w = s['NAV']
    draw_string(w, 0, 0, " Latitude: ")
    draw_string(w, 1, 0, "Longitude: ")
    draw_string(w, 2, 0, " Altitude: ")

    draw_string(w, 0, 30, "Track: ")
    draw_string(w, 1, 30, "Speed: ")
    draw_string(w, 2, 30, " TTFF: ")
    
    draw_string(w, 0, 55, "  Fix Type: ")
    draw_string(w, 1, 55, "Satellites: ")
    draw_string(w, 2, 55, "      HDOP: ")
    w.refresh()
    

def GPGGA(a):
    w = s['NAV']
    global lostfix, hasfix, gotfix

#    015256.000,3946.0024,N,10513.9030,W,2,06,2.01,1780.0,M,-20.7,M,0000,0000
    draw_string(w, 0, 11, format_dms(a[2], a[3]))
    draw_string(w, 1, 11, format_dms(a[4], a[5]))
    draw_string(w, 2, 11, "%6s %s" % (a[9], a[10]))

    newhasfix = (fix[a[6]] != "Invalid")

    if hasfix and not newhasfix:
        lostfix = math.floor(time.time())
        
    if not hasfix and newhasfix:
        gotfix = math.floor(time.time())
        
    hasfix = newhasfix
    
    if hasfix:
        ttff = gotfix - lostfix
    else:
        ttff = time.time() - lostfix
        
    draw_string(w, 0, 67, "%-7s %3s" % (fix[a[6]], modes['2']))  
    draw_string(w, 1, 67, "%-3s" % a[7])  
    draw_string(w, 2, 67, "%-5s" % a[8])  
    draw_string(w, 2, 38, "%d" % ttff)  
    w.refresh()

def GPGLL(a):
    w = s['NAV']
    st = "Latitude:%17s   Longitude: %17s" % \
             (format_dms(a[1], a[2]), format_dms(a[3], a[4])) 

    w.derwin(1, len(st), 0, 0).erase()
    w.addstr(0, 0, st)
    w.refresh()

def GPGSA(a):
    modes['1'] = a[1]
    modes['2'] = modes_t[a[2]]
    
def GPGSV(a):
    w = s['SAT']
        
    messages = a[1].isdigit() and int(a[1]) or 0
    message = a[2].isdigit() and int(a[2]) or 0
    siv = a[3].isdigit() and int(a[3]) or 0
    s1 = a[4:8]
    s2 = a[8:12]
    s3 = a[12:16]
    s4 = a[16:20]
    
    if message == 1:
        w.derwin(4, 78, 0, 0).erase()
        w.addstr(0, 0, "  Sat: ")
        w.addstr(1, 0, "Elev%s: " % degree)
        w.addstr(2, 0, "  Az%s: " % degree)
        w.addstr(3, 0, "  SNR: ")
        
    col = 7 + ((message - 1) * 16)
    for i in range(0,4):
        try:
            w.addstr(i, col, "%3s %3s %3s %3s " % (s1[i], s2[i], s3[i], s4[i])) 
        except:
            w.addstr(i, col, "                ") 
    
    w.refresh()

def GPVTG(a):
    w = s['NAV']
    if len(a[1]) < 3:
        w.erase()
        w.refresh()

    draw_string(w, 0, 38, "%5s" % (format_heading(a[1], a[2])))
    try:
        s1 = float(a[5])
        s2 = float(a[7])
    except:
        s1 = 0.0
        s2 = 0.0

    draw_string(w, 1, 38, "%.1f%s %.1f%s" % (s1, speed_units[a[6]], s2, speed_units[a[8]]))      
        
        
    w.refresh()

def GPZDA(a):
    w = s['TIME']
    if len(a[1]) < 3:
        w.erase()
        w.refresh()
        return;
    
    draw_string(w, 0, 6, "%4s-%2s-%2s" % (a[4], a[3], a[2]))
    draw_string(w, 0, 24, "%2s:%2s:%2s" % (a[1][0:2], a[1][2:4],a[1][4:6]), refresh=True)

def PMTK707(a):
    w = s['SAT']
    sets = a[1].isdigit() and int(a[1]) or 0
    
    ct = math.floor((time.time() - GPS_OFFSET_SECONDS) / SECONDS_PER_HOUR)
    
    if sets > 0:
        startw = (int(a[2]) * 168 + int(a[3]) / 3600)
        endw = (int(a[4]) * 168 + int(a[5]) / 3600)
        st = "  EPO: %3d sets: %s to %s Status: %s" % (sets, Convert2UTC(startw), Convert2UTC(endw),
            ((ct >= startw and ct <= endw) and "Usable" or "Unusable"))
    else:
        st = "  EPO: Not valid"
        
    w.derwin(1, len(st), 4, 0).erase()
    w.addstr(4, 0, st)
    w.refresh()
 
def main():
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@',
    description="Displays NMEA Data",
    epilog="You can use '@filename' to read arguments from a file.")
    parser.convert_arg_line_to_args = convert_arg_line_to_args
    parser.add_argument("gps_device", metavar="<GPS_Device>", help="GPS Device")
    args = parser.parse_args()

    stdscr = curses.initscr()
    curses.start_color();
    curses.noecho()
    curses.cbreak()
    curses.curs_set(0)
    stdscr.keypad(1)
    stdscr.nodelay(1)
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_WHITE)
    
    fg = None
    vcount = 0
    width = 81
    x = 0
    y = 0
    global lostfix, hasfix, gotfix
    lostfix = time.time()
    hasfix = False
    gotfix = time.time()
    try:
    
        w['NMEA'] = curses.newwin(12, width, 15, 0)
        w['NMEA'].border()
        w['NMEA'].addstr(0, 2, "NMEA ")
        w['NMEA'].nodelay(1)
        w['NMEA'].refresh()
        y, x = w['NMEA'].getmaxyx()
        s['NMEA'] = w['NMEA'].derwin(y-2, x-2, 1, 1)
        s['NMEA'].setscrreg(0, y-3)
        s['NMEA'].scrollok(True)
        

        w['NAV'] = curses.newwin(5, width, 0, 0)
        w['NAV'].border()
        w['NAV'].addstr(0, 2, "Navigation ")
        w['NAV'].refresh()
        y, x = w['NAV'].getmaxyx()
        s['NAV'] = w['NAV'].derwin(y-2, x-2, 1, 1)
        draw_nav()
        
        w['TIME'] = curses.newwin(3, width, 5, 0)
        w['TIME'].border()
        w['TIME'].addstr(0, 2, "Date/Time ")
        w['TIME'].refresh()
        y, x = w['TIME'].getmaxyx()
        s['TIME'] = w['TIME'].derwin(y-2, x-2, 1, 1)
        draw_time()
        
        w['SAT'] = curses.newwin(7, width, 8, 0)
        w['SAT'].border()
        w['SAT'].addstr(0, 2, "Satellites ")
        w['SAT'].refresh()
        y, x = w['SAT'].getmaxyx()
        s['SAT'] = w['SAT'].derwin(y-2, x-2, 1, 1)
        
        
#        f['GPGLL'] = GPGLL
        f['GPGGA'] = GPGGA
        f['GPGSA'] = GPGSA
        f['GPGSV'] = GPGSV
        f['GPVTG'] = GPVTG
        f['GPZDA'] = GPZDA
        f['PMTK707'] = PMTK707
        
        
        tfg = os.open(args.gps_device, os.O_RDWR)
        params = termios.tcgetattr(tfg);
        previous_baudrate = baudrate[params[5]];
        tty.setraw(tfg, tty.TCSANOW)
        os.close(tfg)
    
        fg = serial.Serial(port=args.gps_device, timeout=5, baudrate=previous_baudrate)
        last_sent = int(time.time())
        paused = False
        while True:
            line = fg.readline()
            qq = w['NMEA'].getch()
            if qq == ord('q'):
                break
            if qq == ord('p'):
                paused = True
            if qq == ord('r'):
                paused = False
            
            if paused: continue;
            
            line = line.strip()
            if len(line) == 0 or line[0] != "$":
                continue;
            line = line[1:-3]
            a = line.split(',')
            stype = a[0]
            
            if stype in f:
                f[stype](a)

            y, x = s['NMEA'].getmaxyx()
            if vcount == y-1:
                s['NMEA'].scroll(1)     
            s['NMEA'].addnstr(vcount, 0, line, width-3)
            s['NMEA'].refresh()
            if vcount < y-1:
                vcount += 1

            tm = int(time.time())
            if tm % 10 == 0 and last_sent != tm:
                send_string(fg, "PMTK607")
                last_sent = tm
                
    finally:
        curses.nocbreak(); curses.echo()
        curses.endwin()    
        if fg:
            fg.close()
    
if __name__ == "__main__":
    sys.exit(main() or 0)