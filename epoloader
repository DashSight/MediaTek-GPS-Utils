#!/usr/bin/python

import sys
import os
import io
import array
import struct
import time
import binascii
import argparse
import popen2
import serial
import subprocess

PREAMBLE = 0x2404
EPO_CMD = 0x02d2
EOW = 0x0a0d
UART_CMD = 253
SATS_PER_EPO = 32
SECONDS_PER_HOUR = 3600
GPS_OFFSET_SECONDS = 315964786
SECONDS_PER_WEEK = 604800
HOURS_PER_WEEK = 168

baudrate = {
	"8bc": 4800,
	"8bd": 9600,
	"8be": 19200,
	"8bf": 38400,
	"18b1": 57600,
	"18b2": 115200,
}

def Convert2UTC(GPSHour):
	GPSHour *= SECONDS_PER_HOUR
	GPSHour += GPS_OFFSET_SECONDS
	return time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(GPSHour))

def Convert2Local(GPSHour):
	GPSHour *= SECONDS_PER_HOUR
	GPSHour += GPS_OFFSET_SECONDS
	return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(GPSHour))

def crc8(d):
	crc = 0
	for b in bytearray(d):
		crc ^= (b & 0xff)
	return crc

def getResponse(fg, command):
	limit = 0
	while True:
		b = fg.read(1)
		if len(b) == 0:
			break

		if b != '\x04':
			continue
			
		b = fg.read(1)
		if b != '\x24':
			continue
			
		length, cmd = struct.unpack("<HH", fg.read(4))
		
		if cmd == command:
			return struct.unpack("<HBBH", fg.read(6))
		else:
			resp = struct.unpack("<%dBBH" % (length - 9), fg.read(length-6))
			
		limit += 1
		if limit > 10:
			break
			
	return (-1, -1, -1, -1)

def getNMEAResponse(fg, command):
	limit = 0
	while True:
		line = fg.readline().strip()
		spl = line[1:].split(',')
		if spl[0] == command:
			return spl

		limit += 1
		if limit > 20:
			break
			
	return None

def send_string(fg, string):
	fg.write("$%s*%02x\r\n" % (string, crc8(string)))
	fg.flushOutput()

def send_speed(fg, speed, count, delay):
	speed_string = "PMTK251,%d" % speed
	send_string = "$%s*%02x\r\n" % (speed_string, crc8(speed_string))
	for x in range(count):
		fg.write(send_string)
		fg.flush()
		time.sleep(delay)

def convert_arg_line_to_args(arg_line):
    for arg in arg_line.split():
        if not arg.strip():
            continue
        yield arg
        
def main():
	parser = argparse.ArgumentParser(fromfile_prefix_chars='@',
	description="Loads EPO data sets to MT3339 GPS",
	epilog="You can use '@filename' to read arguments from a file.")
	parser.convert_arg_line_to_args = convert_arg_line_to_args
	group = parser.add_argument_group(title="optional known time and location parameters")
	group.add_argument("-t", "--time", dest="time_string", help="Current UTC", metavar="yyyy,mm,dd,hh,mm,ss")
	group.add_argument("-l", "--location", dest="location_string", help="Current location specified in decimal degrees and meters", metavar="lat.dddddd,lon.dddddd,alt")
	
	parser.add_argument("-s", "--speed", type=int, default=115200, dest="speed", help="Interface speed", choices=[4800,9600,19200,38400,57600,115200])
	parser.add_argument("-k", "--keep-new-speed", dest="keep_new_speed", default=False, action="store_true", help="Don't restore the old speed on exit")
	parser.add_argument("-c", "--clear", dest="clear_epo", default=False, action="store_true", help="Clears the existing EPO data from the unit")
	parser.add_argument("input_file", metavar="EPO_File", help="EPO File or '-' to just set the known parameters")
	parser.add_argument("output_device", metavar="gps_device", help="GPS serial device such as '/dev/ttyUSB0'")
           
	args = parser.parse_args()

	r, w = popen2.popen2("lsof -FpcL %s 2>/dev/null" % args.output_device)
	lines = r.readlines()
	r.close()
	w.close()
	if len(lines) > 0:
		print "ERROR: Device %s is open by PID: %s  PROG: %s  USER: %s\n" % (args.output_device, lines[0][1:-1], lines[1][1:-1], lines[2][1:-1])
		return 1;
	
	if args.input_file != "-":
		try:
			file_size = os.stat(args.input_file).st_size
			fi = io.open(args.input_file, mode="rb")
		except:
			print sys.exc_info()[1]
			return 0
			
		header = fi.read(75)
		fi.close()
		if header[0:3] == header[60:63]:
			print "Opening EPO Type I file"
			EPO_SET_SIZE = 1920
			SAT_SET_SIZE = 60
			FRAME_LENGTH = 191
		elif header[0:3] == header[72:75]:
			print "Opening EPO Type II file"
			EPO_SET_SIZE = 2304
			SAT_SET_SIZE = 72
			FRAME_LENGTH = 227
		else:
			parser.error(message="%s is not a valid EPO file.\n" % args.input_file)
		
		if file_size % EPO_SET_SIZE != 0:
			parser.error(message="The size of %s is not an even multiple of EPO_SET_SIZE(%d).  It may be corrupted.\n" % (args.input_file, EPO_SET_SIZE))

		fi = io.open(args.input_file, mode="rb", buffering=0)
	else:
		fi = None
			
	if args.keep_new_speed:
		previous_baudrate = args.speed
	else:
		stty = subprocess.check_output("stty -g -F %s" % args.output_device, shell=True).split(":")
		previous_baudrate = baudrate[stty[2]]
		print "Saving current port speed: %d" % previous_baudrate
	subprocess.call("stty -F %s raw" % args.output_device, shell=True)
	
	fg = serial.Serial(port=args.output_device, timeout=5, baudrate=previous_baudrate)
	send_speed(fg, args.speed, 3, 0.123)
	fg.baudrate = args.speed
	print "Set port speed: %d" % args.speed
		
	if not args.location_string is None or not args.time_string is None:
		if args.time_string == "-":
			t = time.time();
			tm = time.gmtime(t)
			time_string = time.strftime("%Y,%m,%d,%H,%M,%S", tm)
		else:
			time_string = args.time_string

		print "Setting known values: %s  %s" % (args.location_string, time_string)
		send_string(fg, "PMTK740,%s" % time_string)
		resp = getNMEAResponse(fg, "PMTK001")
		send_string(fg, "PMTK741,%s,%s" % (args.location_string, time_string))
		resp = getNMEAResponse(fg, "PMTK001")

	if args.clear_epo:
		print "Clearing existing EPO data"
		send_string(fg, "PMTK127")
		resp = getNMEAResponse(fg, "PMTK001")
		
	if fi is None:
		fg.close()
		return 0
		
	print "Setting binary mode, speed: %d" % args.speed
	send_string(fg, "PMTK253,1,%d" % args.speed)
	time.sleep(0.500)
	
	seq = 0;
	total_read = 0;
	failed = False
	epo_sets = 0

	print "Sending %d EPO sets" % (file_size / EPO_SET_SIZE)
	while total_read < file_size:
		for lseq in range(11):
			buf = bytearray('\0' * FRAME_LENGTH)
			struct.pack_into("<HHHH", buf, 0, PREAMBLE, FRAME_LENGTH, EPO_CMD, seq)
			data_start = 8
			if lseq == 10:
				data_end = data_start + SAT_SET_SIZE*2
			else:
				data_end = data_start + SAT_SET_SIZE*3

			fb = memoryview(buf)
			br = fi.readinto(fb[data_start:data_end])
			total_read += br
			struct.pack_into("<BH", buf, FRAME_LENGTH - 3, crc8(buf[2: FRAME_LENGTH - 3]), EOW)

			if lseq == 0:
				epo_sets +=1
				set_start_time = struct.unpack("<i", buf[8:11] + '\0')[0]
				print "Sending set %4d.  Valid from %s UTC" % (epo_sets, Convert2UTC(set_start_time))
				if seq == 0:
					start = set_start_time

			fg.write(buf)
			fg.flush();
			rseq, result, cs, crlf = getResponse(fg, 2)
			if result != 1:
				failed = True
				print "Transfer failed"
				break
			if seq != rseq:
				failed = True
				print "Sequence error: %d != %d" % (seq, result)
				break
			seq += 1

		if failed:
			break

	if not failed:
		end = struct.unpack("<i", buf[8:11]+'\0')[0]
		buf = bytearray('\0' * FRAME_LENGTH)
		struct.pack_into("<HHHH", buf, 0, PREAMBLE, FRAME_LENGTH, EPO_CMD, 0xffff)
		struct.pack_into("<BH", buf, FRAME_LENGTH - 3, crc8(buf[2: FRAME_LENGTH - 3]), EOW)
		fg.write(buf)
		fg.flush()
		seq, result, cs, crlf = getResponse(fg, 2)
		if result != 1:
			print "Final Transfer failed"
		else:
			print "%4d sets sent.  Valid from %s to %s UTC" % (epo_sets,
			Convert2UTC(start),
			Convert2UTC(end+6))

	time.sleep(1)
	print "Resetting NMEA Mode at %d" % previous_baudrate
	buf = bytearray('\0' * 14)
	struct.pack_into("<HHHBIBH", buf, 0, PREAMBLE, 14, UART_CMD, 0, args.speed, 0, EOW)
	struct.pack_into("B", buf, 11, crc8(buf[2:11]))
	fg.write(buf)
	fg.flush()
	resp = getResponse(fg, 1)
	send_string(fg, "PMTK607")
	resp = getNMEAResponse(fg, "PMTK707")

	if not args.keep_new_speed:
		send_speed(fg, previous_baudrate, 3, 0.057)
		fg.baudrate = previous_baudrate

	fg.close()
	subprocess.call("stty -F %s raw" % args.output_device, shell=True)
	
	vstart = (int(resp[2]) * 168 + int(resp[3]) / 3600)
	vend = (int(resp[4]) * 168 + int(resp[5]) / 3600)
	if vstart == start and vend == end:
		print "Verified EPO in NVRAM matches file"
		return 0
	else:
		print "ERROR: EPO in NVRAM doesnt match file"
		print "  In NVRAM: %s to %s UTC" % (Convert2UTC(vstart), Convert2UTC(vend))     
		return 1
		
if __name__ == "__main__":
    sys.exit(main() or 0)

